theme_bw() +  theme(
legend.position = 'top',
legend.justification = c(0, 1),
legend.direction = "vertical",
legend.text = element_text(size = 18),
legend.key.width = unit(1, "cm"),
axis.title.y = element_text(size = 20),     axis.title.x = element_blank(),
axis.text.x = element_text(size = 15, angle = 45, hjust = 1),
text = element_text(size = 15),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank()) +
ylim(0,1000) +
xlab('Date') + ylab('Nombre de tests par 100 000')  + facet_wrap(facets = vars(province))
p_pr_tests
p_PR <-
ggplot() +
geom_line( data = daily_pr, aes(x = Date_Stat, y = PR, group=province))
scaleFactor <-
diff(ggplot_build(p_pr_tests)$layout$panel_params[[1]]$y$breaks)[1] /
50*diff(ggplot_build(p_PR)$layout$panel_params[[1]]$y$breaks)[1]
print(
p_pr_tests +
geom_line(
data = daily_pr,
aes(x = Date_Stat, y = PR * scaleFactor, color = "posrate", group=province),
size = 0.5) +
scale_y_continuous(limits=c(0, 1000),
sec.axis =
sec_axis(~./(100*scaleFactor),
name = "Positivité (%)",
labels = function(...) scales::percent(..., accuracy = 1))) +
scale_color_manual(name=NULL,values = c('tests'='black', 'posrate'='#C95117'), labels=c('Positivité','Tests par 100 000')) +
guides(colour=guide_legend(ncol=2)) +
facet_wrap(facets = vars(province)) +
theme(strip.text = element_text(size=9),
legend.position = 'top',
legend.justification = c(0, 1),
legend.direction = "vertical",
legend.text = element_text(size = 15),
legend.key.width = unit(1, "cm"),
axis.title.y = element_text(size = 15),     axis.title.x = element_text(size = 15),
axis.text.x = element_text(size = 15, angle = 45, hjust = 1),
text = element_text(size = 15),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank()))
print(
p_pr_tests +
geom_line(
data = daily_pr,
aes(x = Date_Stat, y = PR * scaleFactor, color = "posrate", group=province),
size = 0.5) +
scale_y_continuous(limits=c(0, 1000),
sec.axis =
sec_axis(~./(100*scaleFactor),
name = "Positivité (%)",
labels = function(...) scales::percent(..., accuracy = 1))) +
scale_color_manual(name=NULL,values = c('tests'='black', 'posrate'='#C95117'), labels=c('Positivité','Tests par 100 000')) +
guides(colour=guide_legend(ncol=2)) +
facet_wrap(facets = vars(province)) +
theme(strip.text = element_text(size=9),
legend.position = 'top',
legend.justification = c(0, 1),
legend.direction = "vertical",
legend.text = element_text(size = 15),
legend.key.width = unit(1, "cm"),
axis.title.y = element_text(size = 15),     axis.title.x = element_text(size = 15),
axis.text.x = element_text(size = 15, angle = 45, hjust = 1),
text = element_text(size = 15),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank()))
p_pr_tests +
geom_line(
data = daily_pr,
aes(x = Date_Stat, y = PR * scaleFactor, color = "posrate", group=province),
size = 0.5) +
scale_y_continuous(limits=c(0, 1000),
sec.axis =
sec_axis(~./(100*scaleFactor),
name = "Positivité (%)",
labels = function(...) scales::percent(..., accuracy = 1))) +
scale_color_manual(name=NULL,values = c('tests'='black', 'posrate'='#C95117'), labels=c('Positivité','Tests par 100 000')) +
guides(colour=guide_legend(ncol=2)) +
facet_wrap(facets = vars(province)) +
theme(strip.text = element_text(size=9),
legend.position = 'top',
legend.justification = c(0, 1),
legend.direction = "vertical",
legend.text = element_text(size = 15),
legend.key.width = unit(1, "cm"),
axis.title.y = element_text(size = 15),     axis.title.x = element_text(size = 15),
axis.text.x = element_text(size = 15, angle = 45, hjust = 1),
text = element_text(size = 15),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank())
print(
p_pr_tests +
geom_line(
data = daily_pr,
aes(x = Date_Stat, y = PR * scaleFactor, color = "posrate", group=province),
size = 0.5) +
scale_y_continuous(limits=c(0, 1000),
sec.axis =
sec_axis(~./(100*scaleFactor),
name = "Positivité (%)",
labels = function(...) scales::percent(..., accuracy = 1))) +
scale_color_manual(name=NULL,values = c('tests'='black', 'posrate'='#C95117'), labels=c('Positivité','Tests par 100 000')) +
guides(colour=guide_legend(ncol=2)) +
facet_wrap(facets = vars(province)) +
theme(strip.text = element_text(size=9),
legend.position = 'top',
legend.justification = c(0, 1),
legend.direction = "vertical",
legend.text = element_text(size = 15),
legend.key.width = unit(1, "cm"),
axis.title.y = element_text(size = 15),     axis.title.x = element_text(size = 15),
axis.text.x = element_text(size = 15, angle = 45, hjust = 1),
text = element_text(size = 15),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank()))
p_pr_tests <- ggplot(data =daily_pr, (aes(x=Date_Stat, group=province))) + geom_line(aes(y=Movavg.By.Pop, color="tests")) +
theme_bw() +  theme(
legend.position = 'top',
legend.justification = c(0, 1),
legend.direction = "vertical",
legend.text = element_text(size = 18),
legend.key.width = unit(1, "cm"),
axis.title.y = element_text(size = 20),     axis.title.x = element_blank(),
axis.text.x = element_text(size = 15, angle = 45, hjust = 1),
text = element_text(size = 15),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank()) +
ylim(0,1000) +
xlab('Date') + ylab('Nombre de tests par 100 000')  + facet_wrap(facets = vars(province))
p_pr_tests
p_PR <-
ggplot() +
geom_line( data = daily_pr, aes(x = Date_Stat, y = PR, group=province))
scaleFactor <-
diff(ggplot_build(p_pr_tests)$layout$panel_params[[1]]$y$breaks)[1] /
100*diff(ggplot_build(p_PR)$layout$panel_params[[1]]$y$breaks)[1]
p_pr_tests +
geom_line(
data = daily_pr,
aes(x = Date_Stat, y = PR * scaleFactor, color = "posrate", group=province),
size = 0.5) +
scale_y_continuous(limits=c(0, 1000),
sec.axis =
sec_axis(~./(100*scaleFactor),
name = "Positivité (%)",
labels = function(...) scales::percent(..., accuracy = 1))) +
scale_color_manual(name=NULL,values = c('tests'='black', 'posrate'='#C95117'), labels=c('Positivité','Tests par 100 000')) +
guides(colour=guide_legend(ncol=2)) +
facet_wrap(facets = vars(province)) +
theme(strip.text = element_text(size=9),
legend.position = 'top',
legend.justification = c(0, 1),
legend.direction = "vertical",
legend.text = element_text(size = 15),
legend.key.width = unit(1, "cm"),
axis.title.y = element_text(size = 15),     axis.title.x = element_text(size = 15),
axis.text.x = element_text(size = 15, angle = 45, hjust = 1),
text = element_text(size = 15),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank())
p_pr_tests +
geom_line(
data = daily_pr,
aes(x = Date_Stat, y = PR * scaleFactor, color = "posrate", group=province),
size = 0.5) +
guides(colour=guide_legend(ncol=2))
p_pr_tests +
geom_line(
data = daily_pr,
aes(x = Date_Stat, y = PR * scaleFactor, color = "posrate", group=province),
size = 0.5) +
scale_y_continuous(limits=c(0, 1000),
sec.axis =
sec_axis(~./(100*scaleFactor),
name = "Positivité (%)",
labels = function(...) scales::percent(..., accuracy = 1))) +
scale_color_manual(name=NULL,values = c('tests'='black', 'posrate'='#C95117'), labels=c('Positivité','Tests par 100 000')) +
guides(colour=guide_legend(ncol=2))
export1.3 <- paste0(directory, "/tests_positivity_FR.png")
png(export1.3, res=72*resfactor, width=1000*resfactor, height = 600*resfactor)
print(
p_PR +
scale_y_continuous(limits=c(0, 1000),
sec.axis =
sec_axis(~./(100*scaleFactor),
name = "Positivité (%)",
labels = function(...) scales::percent(..., accuracy = 1))) +
scale_color_manual(name=NULL,values = c('tests'='black', 'posrate'='#C95117'), labels=c('Positivité','Tests par 100 000')) +
guides(colour=guide_legend(ncol=2)) )
dev.off()
p_PR +
scale_y_continuous(limits=c(0, 1000),
sec.axis =
sec_axis(~./(100*scaleFactor),
name = "Positivité (%)",
labels = function(...) scales::percent(..., accuracy = 1))) +
scale_color_manual(name=NULL,values = c('tests'='black', 'posrate'='#C95117'), labels=c('Positivité','Tests par 100 000')) +
guides(colour=guide_legend(ncol=2))
p_PR <- p_pr_tests +
geom_line(
data = daily_pr,
aes(x = Date_Stat, y = PR * scaleFactor, color = "posrate", group=province),
size = 0.5) +
guides(colour=guide_legend(ncol=2))
p_PR +
scale_y_continuous(limits=c(0, 1000),
sec.axis =
sec_axis(~./(100*scaleFactor),
name = "Positivité (%)",
labels = function(...) scales::percent(..., accuracy = 1))) +
scale_color_manual(name=NULL,values = c('tests'='black', 'posrate'='#C95117'), labels=c('Positivité','Tests par 100 000')) +
guides(colour=guide_legend(ncol=2))
export1.3 <- paste0(directory, "/tests_positivity_FR.png")
png(export1.3, res=72*resfactor, width=1000*resfactor, height = 600*resfactor)
print(
p_PR +
scale_y_continuous(limits=c(0, 1000),
sec.axis =
sec_axis(~./(100*scaleFactor),
name = "Positivité (%)",
labels = function(...) scales::percent(..., accuracy = 1))) +
scale_color_manual(name=NULL,values = c('tests'='black', 'posrate'='#C95117'), labels=c('Positivité','Tests par 100 000')) +
guides(colour=guide_legend(ncol=2)) )
dev.off()
p_pr_tests <- ggplot(data =daily_pr, (aes(x=Date_Stat, group=province))) + geom_line(aes(y=Movavg.By.Pop, color="tests")) +
theme_bw() +  theme(
legend.position = 'top',
legend.justification = c(0, 1),
legend.direction = "vertical",
legend.text = element_text(size = 18),
legend.key.width = unit(1, "cm"),
axis.title.y = element_text(size = 20),     axis.title.x = element_blank(),
axis.text.x = element_text(size = 15, angle = 45, hjust = 1),
text = element_text(size = 15),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank()) +
ylim(0,1000) + facet_wrap(facets = vars(province))
p_pr_tests
p_PR <-
ggplot() +
geom_line( data = daily_pr, aes(x = Date_Stat, y = PR, group=province))
scaleFactor <-
diff(ggplot_build(p_pr_tests)$layout$panel_params[[1]]$y$breaks)[1] /
100*diff(ggplot_build(p_PR)$layout$panel_params[[1]]$y$breaks)[1]
p_PR <- p_pr_tests +
geom_line(
data = daily_pr,
aes(x = Date_Stat, y = PR * scaleFactor, color = "posrate", group=province),
size = 0.5) +
guides(colour=guide_legend(ncol=2))
p_PR +
xlab('Date') + ylab('Nombre de tests par 100 000') +
scale_y_continuous(limits=c(0, 1000),
sec.axis =
sec_axis(~./(100*scaleFactor),
name = "Positivité (%)",
labels = function(...) scales::percent(..., accuracy = 1))) +
scale_color_manual(name=NULL,values = c('tests'='black', 'posrate'='#C95117'), labels=c('Positivité','Tests par 100 000')) +
guides(colour=guide_legend(ncol=2))
.libPaths('C:/Users/BrBl1834/R/win-library')
library(tidyverse)
library(haven)
library(zoo)
library(readxl)
directory <- paste0("//sciensano.be/fs/1102_EPIVG_Crisis/Crise coronavirus/Surveillance/DATA/SOURCES/LTRMRES/4_results/daily_tests_province/", format(Sys.Date(), "%d%m%y") )
dir.create(directory)
resfactor <- 5
#colors
sciensano1<-"#3AAA35"
sciensano2<-"#006633"
sciensano3<-"#BCCF00"
sciensano4<-"#F9D500"
sciensano5<-"#FBBA00"
#1. tests per 100 000 and positivity rates
#
daily_tests <- read.csv("//sciensano.be/fs/1102_EPIVG_Crisis/Crise coronavirus/Surveillance/DATA/SOURCES/LTRMRES/2_data/DAILY_TESTS_PROV.csv", sep=',')%>%
filter(province!='UNK')%>%
group_by(province)%>%
mutate(movavg=rollmean(Frequency.Count,7,align = 'right',fill=NA))%>%
select(-Percent.of.Total.Frequency)
daily_tests$Date_Stat<-as.Date(daily_tests$Date_Stat)
daily_tests <- daily_tests%>%filter(Date_Stat<Sys.Date()-3)
p_daily_tests <- daily_tests%>% ggplot(aes(x=Date_Stat,y=movavg, group=province)) +
geom_line(size=0.5) +
labs(x='Date',y='Number of tests') +
theme_bw() +  theme(
axis.title.y = element_text(size = 20),     axis.title.x = element_blank(),
text = element_text(size = 15),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank()) +
facet_wrap(facets = vars(province))
p_daily_tests
export1.1 <- paste0(directory, "/daiy_tests_province.png")
png(export1.1, res=72*resfactor, width=1000*resfactor, height = 600*resfactor)
p_daily_tests
dev.off()
daily_tests <- daily_tests%>%mutate(Count.By.Pop=case_when(
(province=='Antwerpen') ~ 100000*Frequency.Count/1857986,
(province=='Brussels') ~ 100000*Frequency.Count/1208542,
(province=='Hainaut') ~ 100000*Frequency.Count/1344241,
(province=='Limburg') ~ 100000*Frequency.Count/874048,
(province=='Liège') ~ 100000*Frequency.Count/1106992,
(province=='Luxembourg') ~ 100000*Frequency.Count/284638,
(province=='Namur') ~ 100000*Frequency.Count/494325,
(province=='OostVlaanderen') ~ 100000*Frequency.Count/1515064,
(province=='VlaamsBrabant') ~ 100000*Frequency.Count/1146175,
(province=='BrabantWallon') ~ 100000*Frequency.Count/403599,
(province=='WestVlaanderen') ~ 100000*Frequency.Count/1195796
))%>%mutate(Movavg.By.Pop=case_when(
(province=='Antwerpen') ~ 100000*movavg/1857986,
(province=='Brussels') ~ 100000*movavg/1208542,
(province=='Hainaut') ~ 100000*movavg/1344241,
(province=='Limburg') ~ 100000*movavg/874048,
(province=='Liège') ~ 100000*movavg/1106992,
(province=='Luxembourg') ~ 100000*movavg/284638,
(province=='Namur') ~ 100000*movavg/494325,
(province=='OostVlaanderen') ~ 100000*movavg/1515064,
(province=='VlaamsBrabant') ~ 100000*movavg/1146175,
(province=='BrabantWallon') ~ 100000*movavg/403599,
(province=='WestVlaanderen') ~ 100000*movavg/1195796
))
p_daily_tests_byPop <- daily_tests %>% ggplot(aes(x=Date_Stat,y=Movavg.By.Pop, group=province)) +
geom_line(size=0.5) +
labs(x='Date',y='Number of tests per 100 000') +
theme_bw() +  theme(
axis.title.y = element_text(size = 20),     axis.title.x = element_blank(),
axis.text.x = element_text(size = 15, angle=45, hjust = 1),
text = element_text(size = 15),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank()) +
facet_wrap(facets = vars(province))
p_daily_tests_byPop
export1.2 <- paste0(directory, "/daily_tests_prov_100k.png")
png(export1.2, res=72*resfactor, width=1000*resfactor, height = 600*resfactor)
p_daily_tests_byPop
dev.off()
daily_pos <- read.csv("//sciensano.be/fs/1102_EPIVG_Crisis/Crise coronavirus/Surveillance/DATA/SOURCES/LTRMRES/2_data/DAILY_POS_PROV.csv", sep=',')%>%
filter(province != 'UNK')%>%
group_by(province)%>%
mutate(movavg_pos=rollmean(Frequency.Count,7,align = 'right',fill=NA))%>%
rename(positives=Frequency.Count)%>%
select(-Percent.of.Total.Frequency)
daily_pos$Date_Stat<-daily_pos$Date_Stat
daily_pos <- daily_pos%>%filter(Date_Stat<Sys.Date()-3)
daily_pr <- merge(daily_tests, daily_pos, by=c('Date_Stat','province'))%>%
mutate(PR=100*movavg_pos/movavg)%>%filter(!is.na(PR))
# %>%
# mutate(PR=rollmean(PR,7,align='right',fill=NA))
##############################
##figure
p_pr_tests <- ggplot(data =daily_pr, (aes(x=Date_Stat, group=province))) + geom_line(aes(y=Movavg.By.Pop, color="tests")) +
theme_bw() +  theme(
legend.position = 'top',
legend.justification = c(0, 1),
legend.direction = "vertical",
legend.text = element_text(size = 18),
legend.key.width = unit(1, "cm"),
axis.title.y = element_text(size = 20),     axis.title.x = element_blank(),
axis.text.x = element_text(size = 15, angle = 45, hjust = 1),
text = element_text(size = 15),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.border = element_blank()) +
ylim(0,1000) + facet_wrap(facets = vars(province))
p_pr_tests
p_PR <-
ggplot() +
geom_line( data = daily_pr, aes(x = Date_Stat, y = PR, group=province))
scaleFactor <-
diff(ggplot_build(p_pr_tests)$layout$panel_params[[1]]$y$breaks)[1] /
100*diff(ggplot_build(p_PR)$layout$panel_params[[1]]$y$breaks)[1]
p_PR <- p_pr_tests +
geom_line(
data = daily_pr,
aes(x = Date_Stat, y = PR * scaleFactor, color = "posrate", group=province),
size = 0.5) +
guides(colour=guide_legend(ncol=2))
# test
p_PR + facet_wrap(facets = vars(province))
p_PR +
xlab('Date') + ylab('Nombre de tests par 100 000') +
scale_y_continuous(limits=c(0, 1000),
sec.axis =
sec_axis(~./(100*scaleFactor),
name = "Positivité (%)",
labels = function(...) scales::percent(..., accuracy = 1))) +
scale_color_manual(name=NULL,values = c('tests'='black', 'posrate'='#C95117'), labels=c('Positivité','Tests par 100 000'))
p_PR +
scale_y_continuous(limits=c(0, 1000),
sec.axis =
sec_axis(~./(100*scaleFactor),
name = "Positiviteitsratio (%)",
labels = function(...) scales::percent(..., accuracy = 1))) +
scale_color_manual(name=NULL,values = c('tests'='black', 'posrate'='#C95117'), labels=c('Positiviteitsratio','Tests per 100 000')) +
xlab('Datum') + ylab('Aantal tests per 100 000')  + facet_wrap(facets = vars(province))
source('//sciensano.be/fs/1102_EPIVG_Crisis/Crise coronavirus/Surveillance/DATA/SOURCES/LTRMRES/3_codes/RAG_EPI.R', echo=TRUE)
source('//sciensano.be/FS/bram.bloemen/SAS_R_Python_training/Rtraining/edX/machine_learning/matrix_factorization.R', echo=TRUE)
diag(s$d)
s$d
# first component of UD
U1d1.1 <- s$u[1,]*s$d[1]
y[1,]
matrix(rep(1, k), nrow = 1)
# average per student
student_avgs <- rowMeans(y)
plot(U1d1.1,student_avgs)
s$u
# first component of UD
U1d1.1 <- s$u[,1]*s$d[1]
# average per student
student_avgs <- rowMeans(y)
plot(U1d1.1,student_avgs)
plot(U1d1.1,student_avgs)
plot(U1d1.1,student_avgs)
source('//sciensano.be/FS/bram.bloemen/SAS_R_Python_training/Rtraining/edX/machine_learning/matrix_factorization.R', echo=TRUE)
dev.off()
U1d1.1
student_avgs
plot(U1d1.1,student_avgs)
# Q9
image(s$v)
# Q9
image(cols,rows,s$v)
help(image)
# Q9
cols <- 1:ncol(s$v)
rows <- 1:nrow(s$v)
image(cols,rows,s$v)
dim(s$v)
plot(s$v[1],s$v[2])
plot(s$v[,1],s$v[,2])
plot(s$v[,1],s$v[,3])
plot(s$v[,1],s$v[,6])
my_image(s$v)
my_image(s$u[,1])
plot(s$u[,1])
)
range(s$u[,1])
ggplot(s$u[,1])
ggplot(s$u[,1])
help(plot)
ggplot(data.frame(s$u[,1]))
ggplot(data.frame(s$u[,1]),aes(y=s$u[,1]))
plot(s$u[,1])
range(s$u[,1])
plot(t(s$v[,1]))
s$v[,1]
t(s$v[,1])
plot(s$v[,1])
U1d1.1.tsv1 <- U1d1.1 %*% t(s$v[,1])
my_image(U1d1.1.tsv1)
my_image(y)
resid <- y - with(s,(u[, 1, drop=FALSE]*d[1]) %*% t(v[, 1, drop=FALSE]))
my_image(cor(resid), zlim = c(-1,1))
axis(side = 2, 1:ncol(y), rev(colnames(y)), las = 2)
plot(s$u[,2])
range(s$u[,2])
plot(s$v[,2])
plot(t(s$v[,2]))
U2d2.2 <- s$u[,2]*s$d[2]
U2d2.2.tsv2 <- U2d2.2 %*% t(s$v[,2])
my_image(U2d2.2.tsv2)
my_image(y)
sum(s$d[1:2]^2)/sum(s$d^2) * 100
resid <- y - with(s,sweep(u[, 1:2], 2, d[1:2], FUN="*") %*% t(v[, 1:2]))
my_image(cor(resid), zlim = c(-1,1))
axis(side = 2, 1:ncol(y), rev(colnames(y)), las = 2)
plot(s$u[,3])
range(s$u[,3])
plot(s$v[,3])
plot(t(s$v[,3]))
U3d3.3 <- s$u[,3]*s$d[3]
U3d3.3.tsv3 <- U3d3.3 %*% t(s$v[,3])
my_image(U3d3.3.tsv3)
my_image(y)
# Q13
sum(s$d[1:3]^2)/sum(s$d^2) * 100
resid <- y - with(s,sweep(u[, 1:3], 2, d[1:3], FUN="*") %*% t(v[, 1:3]))
my_image(cor(resid), zlim = c(-1,1))
axis(side = 2, 1:ncol(y), rev(colnames(y)), las = 2)
my_image(U1d1.1.tsv1 + U2d2.2.tsv2 +U3d3.3.tsv3)
resid <- y - with(s,sweep(u[, 1:3], 2, d[1:3], FUN="*") %*% t(v[, 1:3]))
my_image(cor(resid), zlim = c(-1,1))
axis(side = 2, 1:ncol(y), rev(colnames(y)), las = 2)
my_image(U1d1.1.tsv1 + U2d2.2.tsv2 +U3d3.3.tsv3)
my_image(y)
my_image(y-(U1d1.1.tsv1 + U2d2.2.tsv2 +U3d3.3.tsv3))
y_hat <- with(s,sweep(u[, 1:3], 2, d[1:3], FUN="*") %*% t(v[, 1:3]))
my_image(y, zlim = range(y))
my_image(y_hat, zlim = range(y))
my_image(y - y_hat, zlim = range(y))
my_image(U1d1.1.tsv1 + U2d2.2.tsv2 +U3d3.3.tsv3)
my_image(y)
my_image(y-(U1d1.1.tsv1 + U2d2.2.tsv2 +U3d3.3.tsv3))
y_hat <- with(s,sweep(u[, 1:3], 2, d[1:3], FUN="*") %*% t(v[, 1:3]))
my_image(y, zlim = range(y))
my_image(y_hat, zlim = range(y))
my_image(y - y_hat, zlim = range(y))
